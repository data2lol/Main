给一串长度，要求搭出两个等长的高度，不能重复用物品，问最高能搭多高

一个开始以为是一个很简单的背包，其实算法是对的，无奈复杂度高达10亿
另外有巧妙的思路，枚举的是两个高度的差，同时记录此时最矮的高度
那么对于任意一个高度，选择就是
1. 加入矮的一边
2. 加入高的一边
3. 被忽略
4. 忽略以前所有的高度，只保留这个
加入矮的一边是可能发生高矮转换！


    static class Task implements Runnable{
    	int n;
    	int arr[];
        public void solve(InputReader in, PrintWriter out) throws IOException {
        	n = in.nextInt();
        	arr = new int[n];
        	int sum = 0;
        	for(int i=0;i<n;i++){
        		arr[i] = in.nextInt();
        		sum += arr[i];
        	}
        	int dp[][] = new int[n][sum+1];
        	for(int i=0;i<n;i++){
        		Arrays.fill(dp[i], -1);
        	}
        	dp[0][arr[0]] = 0;
        	for(int i=1;i<n;i++){
        		for(int j=0;j<=sum;j++){
        			if(dp[i-1][j]==-1) continue;
        			int l = dp[i-1][j];
        			int h = dp[i-1][j]+j;
        			
        			//add to high
        			dp[i][j+arr[i]] = Math.max(dp[i][j+arr[i]], l);
        			//add to low
        			if(l+arr[i]>=h){ //low>high now
        				dp[i][l+arr[i]-h] = Math.max(dp[i][l+arr[i]-h], h);
        			}else{
        				dp[i][h-l-arr[i]] = Math.max(dp[i][h-l-arr[i]], l+arr[i]);
        			}
        			//ignore this
        			dp[i][j] = Math.max(dp[i][j], dp[i-1][j]);
        			//ignore all previous
        			dp[i][arr[i]] = Math.max(dp[i][arr[i]], 0);
        		}
        	}
        	out.println(dp[n-1][0]==-1?"Impossible":dp[n-1][0]);
        	out.close();
        }
