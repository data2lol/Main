给你一组数字，这组数字组成一个环，所以可以从任意一点开始作为起始点
然后就是三个数连续相乘，比如a*b*c可以把b消掉，剩下继续和其余的点乘。
要求的是不同顺序下每次操作乘法的积之和的最大值。

其实说了这么多，就是经典DP 矩阵乘法变成一个环。
于是可以把N长度的数字扩展成2N， 那么随后就是求N长度的最大。枚举i的值求dp[i][i+n-1]

    static class Task{
    	int n;
    	int arr[];
        public void solve(InputReader in, PrintWriter out) throws IOException {
        	n = in.nextInt();
        	arr = new int[2*n];
        	int max = -1;
        	for(int i=0;i<n;i++){
        		arr[i] = in.nextInt();
        		arr[i+n] = arr[i];
        	}
        	int dp[][] = new int[2*n][2*n];
        	for(int gap=1;gap<2*n;gap++){
        		for(int i=1;i+gap<2*n;i++){
        			int j = i+gap;
        			for(int k=i;k<j;k++){
        				dp[i][j] = Math.max(dp[i][j], dp[i][k]+dp[k+1][j]+arr[i-1]*arr[k]*arr[j]);
        			}
        		}
        	}
        	for(int i=1;i<=n;i++){
        		if(dp[i][i+n-1]>max) max = dp[i][i+n-1];        		
        	}
        	System.out.println(max);   	
        }
    }
