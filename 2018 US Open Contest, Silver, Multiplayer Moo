		public void solve(InputReader in, PrintWriter out) throws IOException {


			long tStart = System.currentTimeMillis();


			int n = in.nextInt();


			int arr[][] = new int[n][n];


			int block[][] = new int[n][n];


			HashMap<Integer, Integer> mp = new HashMap<Integer, Integer>();


			int m = 0;


			for (int i = 0; i < n; i++) {


				for (int j = 0; j < n; j++) {


					int tmp = in.nextInt();


					if (!mp.containsKey(tmp)) {


						mp.put(tmp, m);


						m++;


					}


					arr[i][j] = mp.get(tmp);


					block[i][j] = -1;


				}


			}


			if(m==1) {


				out.println(0);


				return;


			}



			int dir[][] = { { 0, -1 }, { 1, 0 }, { 0, 1 }, { -1, 0 } };


			int nums[] = new int[n*n];


			int hash[] = new int[n*n];


			ArrayList<Integer> arr1[] = new ArrayList[m];


			for(int i=0;i<m;i++) {


				arr1[i] = new ArrayList<Integer>();


			}


			int c=0; int max=0;


			for(int i=0;i<n;i++) {


				for(int j=0;j<n;j++) {


					if(block[i][j]==-1) {


						nums[c] = dfs(arr,block,c,dir,i,j);


						hash[c] = arr[i][j];


						if(nums[c]>max) max=nums[c];


						arr1[arr[i][j]].add(c);


						c++;


					}					


				}


			}


			


			Set<Integer> arr2[] = new Set[c];//block


			for(int i=0;i<c;i++) {


				arr2[i] = new HashSet<Integer>();


			}


			for(int i=0;i<n;i++) {


				for(int j=0;j<n;j++) {


					for(int[] d:dir) {


						int nx = i+d[0];


						int ny = j+d[1];


						if(nx<0||ny<0||nx>=arr.length||ny>=arr[0].length) continue;


						if(block[nx][ny]!=block[i][j]) {


							arr2[block[i][j]].add(block[nx][ny]);


						}


					}


				}


			}


			


			int max1 = 2;


			Set<Integer> vis[] = new Set[m];


			for(int i=0;i<m;i++) {


				vis[i] = new HashSet<Integer>();


			}			


			boolean vist[] = new boolean[c];


			for(int i=0;i<c;i++) {


				for(int j:arr2[i]) {


					int id1 = hash[i];


					int id2 = hash[j];


					if(vis[id1].contains(id2)||vis[id2].contains(id1)) continue;


					vis[id1].add(id2);


					vis[id2].add(id1);


					Set<Integer> tmp = new HashSet<Integer>();


					for(int k:arr1[id1]) {						


						if(vist[k]) continue;


						int t = dfs2(id1,id2,arr2,hash,nums,k,tmp);


						if(t>max1) max1 = t;


					}					


				}


			}		


			Dumper.print(max);


			Dumper.print(max1);


			Dumper.print(cnt);


			out.println(max);


			out.println(max1);


		}


		


		int dfs(int arr[][], int block[][], int c, int dir[][], int x, int y) {


			int s=1;


			block[x][y] = c;


			for(int[] d:dir) {


				int nx = x+d[0];


				int ny = y+d[1];


				if(nx<0||ny<0||nx>=arr.length||ny>=arr[0].length||arr[nx][ny]!=arr[x][y]||block[nx][ny]!=-1) continue;							


				s+=dfs(arr,block,c,dir,nx,ny);				


			}


			return s;


		}


		int dfs2(int id1, int id2, Set<Integer>[] arr2, int[] hash, int nums[], int cur, Set<Integer> tmp) {


			int s = nums[cur];	


			tmp.add(cur);


			for(int k:arr2[cur]) {				


				if(tmp.contains(k)) continue;


				if(hash[k]==id1||hash[k]==id2) {					


					s+=dfs2(id1,id2,arr2,hash,nums,k,tmp);					


				}


			}


			return s;


		}	
