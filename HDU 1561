    static class Task implements Runnable{
    	int n,m;
    	int matrix[][];
    	int value[];
    	int dp[][];
        public void solve(InputReader in, PrintWriter out) throws IOException {
        	while(true){
        		n = in.nextInt();
        		m = in.nextInt();
        		if(n==0) break;
        		matrix = new int[n+1][n+1];
        		value = new int[n+1];
        		dp = new int[n+1][m+2];
        		for(int i=1;i<=n;i++){
        			int a = in.nextInt();
        			int b = in.nextInt();
        			value[i] = b;
        			matrix[a][i] = 1;
        		}
        		dfs(0,m+1);
        		System.out.println(dp[0][m+1]);
        	}
        }
        
        /*其实是分组背包的思想转化过来， 如果说是基于01背包也没有错，但是跳跃转换比较大
         *分组背包就是K组物品，每组里互斥只能选一个，然后求最大值
         
         *分组背包的解法比较直观，枚举前K组（0..k)，枚举背包大小，
         *再枚举第K组（新加入的这最后一组）取某一个时候的最优值，那么就是DP[k-1][v], DP[k-1][v-c]+w 求最大
         *c,w是第K组中一个物品的二维
         
         
         *这个原理放到树形DP里就是一个节点，有n个子节点，可以取m个，那么每个子节点为根的树能选 a,b,c,d...个， a+b+c+d+..等于m
         *对节点做背包，求出最优值，那么第一重for循环是节点个数1..n
         *在某个节点内部，背包大小是第二个枚举的对象，第二重for循环是m..1，要从大到小的原理和01背包相同
         *然后枚举的是新进子节点的分配到的个数，第三重for循环是1..j
         *新进节点分配K个的时候，前面的节点可以化为一个整体 （dp[s][j-k]的时候，新节点还未被计算过)*/              
        
        void dfs(int s, int num){
        	dp[s][1] = value[s];
        	for(int i=1;i<=n;i++){
        		if(matrix[s][i]==0) continue;
        		dfs(i,num-1);
        		for(int j=num;j>1;j--){
        			for(int k=0;k<j;k++){
        				dp[s][j] = Math.max(dp[s][j], dp[s][j-k]+dp[i][k]);
        			}
        		}
        	}
        }        
   
        @Override
        public void run() {
            InputStream inputStream = System.in;
            OutputStream outputStream = System.out;
            InputReader in = new InputReader(inputStream);
            PrintWriter out = new PrintWriter(outputStream);            
            try {  
                solve(in,out);  
            } catch (IOException ex) {  
                Logger.getLogger(Task.class.getName()).log(Level.SEVERE, null, ex);  
            }
            out.close();
        }
    }
