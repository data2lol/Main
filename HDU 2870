找最大面积子矩阵，化为一维然后dp, Java stack 不能用！。。。

    public static void main(String[] args) throws IOException{
        InputStream inputStream = System.in;
        OutputStream outputStream = System.out;
        InputReader in = new InputReader(inputStream);
        PrintWriter out = new PrintWriter(outputStream);
        Task t = new Task();
        t.solve(in, out);
        out.close();
    }
    
    static class Task{
        int n,m;
        char arr[][];
        int table[][];
        int max;
        public void solve(InputReader in, PrintWriter out) throws IOException {
            while(in.hasNext()){
                m = in.nextInt(); n = in.nextInt();
                arr = new char[m][n];
                table = new int[m][n];
                max = -1;
                for(int i=0;i<m;i++){
                	String tmp = in.nextLine();
                	for(int j=0;j<n;j++){
                		arr[i][j] = tmp.charAt(j);
                	}
                }
                for(int i=0;i<m;i++){
                	for(int j=0;j<n;j++){
                		if(arr[i][j]=='a'||arr[i][j]=='w'||arr[i][j]=='y'||arr[i][j]=='z'){
                			table[i][j] = i==0?1:table[i-1][j]+1;
                		}else{
                			table[i][j] = 0;
                		}
                	}
                }
                dp();
                for(int i=0;i<m;i++){
                	for(int j=0;j<n;j++){
                		if(arr[i][j]=='b'||arr[i][j]=='w'||arr[i][j]=='x'||arr[i][j]=='z'){
                			table[i][j] = i==0?1:table[i-1][j]+1;
                		}else{
                			table[i][j] = 0;
                		}
                	}
                }
                dp();
                for(int i=0;i<m;i++){
                	for(int j=0;j<n;j++){
                		if(arr[i][j]=='c'||arr[i][j]=='x'||arr[i][j]=='y'||arr[i][j]=='z'){
                			table[i][j] = i==0?1:table[i-1][j]+1;
                		}else{
                			table[i][j] = 0;
                		}
                	}
                }
                dp();                
                System.out.println(max);
            }
        }
        
        public void dp(){
        	for(int i=0;i<m;i++){
        		int tmp = get_largest(table[i]);
        		if(tmp>max) max = tmp;
        	}
        }
        
        public int get_largest(int num[]){
        	int stack[] = new int[num.length];
        	int p = 0;
        	int max = 0;
        	for(int i=0;i<num.length;i++){
        		if(p==0||num[stack[p]]<num[i]){
        			p++;
        			stack[p] = i;
        		}else{
        			int start = stack[p];
        			p--;
        			int width = p==0?i:i-stack[p]-1;
        			int area = width*num[start];
        			if(area>max) max = area;
        			i--;
        		}
        	}
        	while(p!=0){
    			int start = stack[p];
    			p--;
    			int width = p==0?num.length:num.length-stack[p]-1;
    			int area = width*num[start];
    			if(area>max) max = area;        		
        	}
        	return max;
        }         
    }
